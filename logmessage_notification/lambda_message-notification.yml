AWSTemplateFormatVersion: 2010-09-09
Description: 'Create Lambda Function'

Parameters:
  LambdaFunctionName:
    Description: Lambda function name
    Type: String
    Default: "NotifyLogMessage"
  LabmdaRoleArn:
    Description: IAM Role for Lambda function
    Type: String
    Default: "arn:aws:iam::410912548386:role/service-role/NotifyLogMessage-role-vebwdzaj"
  SlackWebhookUrl:
    Description: SlackWehook URL
    Type: String
    Default: "https://hooks.slack.com/services/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"
  SlackChannelName:
    Description: SlackChannel for notification
    Type: String
    Default: "#ite-dx-alert"
  BacklogMail:
    Description: E-mail adress generated by Backlog integration
    Type: String
    Default: "issue-ITE_PROGRESS-8PO9Fex9whTduLqS6weYJnPSl@i5.backlog.com"
  FromMail:
    Description: E-mail adress used for Backlog ticket
    Type: String
    Default: "ite-theme@opentone.co.jp"
  BacklogTicketTitle:
    Description: Backlog ticket title
    Type: String
    Default: "[ALERT]AWS Notify Aplication ERROR message"

Resources:
  NotifyLogMessage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !Ref LabmdaRoleArn
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json
          import logging
          import base64
          import gzip
          import boto3
          import urllib3


          http = urllib3.PoolManager()

          # 設定
          ## 通知先SlackワークスペースのURL
          SLACK_WEBHOOK_URL = "${SlackWebhookUrl}"

          ## 通知先Slackチャンネル名
          SLACK_CHANNEL = "${SlackChannelName}"

          ## SES受信先（Backlog登録用メールアドレス）
          BACKLOG_MAIL = "${BacklogMail}"

          ## SES送信元（Backlogユーザーのメールアドレス）
          FROM_MAIL = "${FromMail}"

          ## 送信元リージョン
          REGION = "${AWS::Region}"

          ## Backlog課題登録名
          BACKLOG_TICKET_TITLE = "${BacklogTicketTitle}"


          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def lambda_handler(event, context):
              """
              handler
              """

              logger.info("Event: " + str(event))

              # サブスクリプションフィルタから受け取ったデータをbase64でデコード
              decoded_data = base64.b64decode(event['awslogs']['data'])

              # gzipでjsonに変換
              decompressed_data = gzip.decompress(decoded_data)
              json_data = json.loads(decompressed_data)

              # ログ出力メッセージ部分を切り出し
              message = json_data['logEvents'][0]['message']

              # Slack通知
              slack_response = notify_slack(message)
              logger.info("Response: " + str(slack_response))

              # Backlog通知
              backlog_response = notify_backlog(message)
              logger.info("Response: " + str(backlog_response))

              return {'NotifyLogMessage': 'success'}


          # Slack通知
          def notify_slack(log_message):
              """
              Slackへログ出力内容を通知する。
              
              Parameters
              ----------
              log_message : str
                  ログ出力内容

              Returns
              -------
              slack_response : str
                  Slack通知の実行結果
              """

              logger.info("notify_slack [start]")

              post_message = {
                  "channel": SLACK_CHANNEL,
                  "username": "",
                  "text": log_message,
                  "icon_emoji": ""
              }

              # Slackにログメッセージを通知
              encoded_msg = json.dumps(post_message).encode('utf-8')
              slack_response = http.request('POST', SLACK_WEBHOOK_URL, body=encoded_msg)
              logger.info("Response: " + str(slack_response))

              logger.info("notify_slack [end]")
              return slack_response



          # Backlog通知
          def notify_backlog(log_message):
              """
              Backlogへログ出力内容で課題登録を行う。
              
              Parameters
              ----------
              log_message : str
                  ログ出力内容

              Returns
              -------
              ses_response : str
                  Backlogメール登録の実行結果
              """

              logger.info("notify_backlog [start]")

              # Backlog課題登録用メールに送信
              subject = BACKLOG_TICKET_TITLE

              client = boto3.client('ses', region_name=REGION)
              ses_response = client.send_email(
                  Source=FROM_MAIL,
                  Destination={
                      'ToAddresses': [
                          BACKLOG_MAIL,
                      ]
                  },
                  Message={
                      'Subject': {
                          'Data': subject,
                      },
                      'Body': {
                          'Text': {
                              'Data': log_message,
                          },
                      }
                  }
              )

              logger.info("notify_backlog [end]")
              return ses_response

